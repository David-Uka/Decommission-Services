name: Decommission Service

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Name of the service to decommission'
        required: true
      force:
        description: 'Force execution without manual confirmation'
        required: false
        default: 'false'

jobs:
  decommission:
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: ${{ github.event.inputs.service_name }}
      FORCE: ${{ github.event.inputs.force }}

    steps:
      - uses: actions/checkout@v3

      - name: Ensure check_inventory.sh is executable
        run: chmod +x scripts/check_inventory.sh

      - name: Validate Input
        run: |
          if [[ -z "$SERVICE_NAME" ]]; then
            echo "SERVICE_NAME is required" && exit 1
          fi
          bash scripts/check_inventory.sh "$SERVICE_NAME"

      - name: Confirmation (skip if forced)
        if: ${{ env.FORCE != 'true' }}
        run: |
          echo "Manual confirmation required. Rerun with force=true to proceed."
          exit 1

  k8s-cleanup:
    needs: decommission
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: ${{ github.event.inputs.service_name }}
    steps:
      - uses: actions/checkout@v3

      - name: Ensure k8s scripts are executable
        run: chmod +x scripts/*.sh

      - name: Drain Traffic
        run: bash scripts/drain_traffic.sh "$SERVICE_NAME"

      - name: Archive Logs
        run: bash scripts/archive_logs.sh "$SERVICE_NAME"

      - name: Snapshot DB
        run: bash scripts/snapshot_db.sh "$SERVICE_NAME"

      - name: Clean Registry
        run: bash scripts/remove_from_service_registry.sh "$SERVICE_NAME"

      - name: Clean DNS
        run: bash scripts/remove_dns.sh "$SERVICE_NAME"

      - name: Clean Monitoring
        run: bash scripts/clean_monitoring.sh "$SERVICE_NAME"

  terraform-destroy:
    needs: decommission
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: ${{ github.event.inputs.service_name }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Destroy Infrastructure
        run: |
          cd infra/services/$SERVICE_NAME
          terraform init -input=false
          terraform destroy -auto-approve

  notify:
    needs: [k8s-cleanup, terraform-destroy]
    runs-on: ubuntu-latest
    steps:
      - run: echo "$SERVICE_NAME decommission complete."
